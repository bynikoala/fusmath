/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm13 = JSIL.DeclareAssembly("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
/* class Microsoft.Win32.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetFileAttributesEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("Microsoft.Win32.UnsafeNativeMethods+WIN32_FILE_ATTRIBUTE_DATA")])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetModuleFileName", 
      new JSIL.MethodSignature($.Int32, [
          $asm0E.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0E.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+WIN32_FILE_ATTRIBUTE_DATA */ 

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+WIN32_FILE_ATTRIBUTE_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "fileAttributes", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.ConfigPathUtility */ 

(function ConfigPathUtility$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Configuration.ConfigPathUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Combine", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParts", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.BaseConfigurationRecord */ 

(function BaseConfigurationRecord$Members () {
  var $, $thisType;






































































































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.BaseConfigurationRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImplicitSections", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowDefinitionToEnum", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), [$.String, $asm13.TypeRef("System.Configuration.XmlUtil")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowExeDefinitionToEnum", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), [$.String, $asm13.TypeRef("System.Configuration.XmlUtil")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostDecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostProcessConfigurationSection", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationSection"), [$asm13.TypeRef("System.Configuration.ConfigurationSection"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostProcessRawXml", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlNode"), [$asm23.TypeRef("System.Xml.XmlNode"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPermissionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseRecursive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineConfigKey", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionDefault", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm13.TypeRef("System.Configuration.FactoryRecord"), $asm13.TypeRef("System.Configuration.SectionRecord"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptConfigSection", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [$asm13.TypeRef("System.Configuration.ConfigXmlReader"), $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureFactories", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLocationSections", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecordImpl", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.SectionRecord"), [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecordUnsafe", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Configuration.FactoryRecord"), $asm13.TypeRef("System.Configuration.SectionRecord"), 
          $.Object, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateOne", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Boolean, $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAndEnsureFactoryRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.FactoryRecord"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFactoryRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.FactoryRecord"), [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFactoryRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.FactoryRecord"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSection", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm13.TypeRef("System.Configuration.SectionXmlInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSectionRecursive", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Int32, 
          $asm13.TypeRef("System.Configuration.XmlUtil"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SimpleBitVector32"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilderHost", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilders", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationBuildersSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConfigPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigStreamInfo", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasFactoryRecords", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasInitErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitDelayed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocationConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMachineConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRootConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationSubPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectedConfig", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProtectedConfigurationSection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StreamName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnrestrictedConfigPermission", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigBuilderFromName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationBuilder"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFactoryRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.FactoryRecord"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProtectionProviderFromName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictedPermissions", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictedPermissionsWithAssert", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Security.PermissionSet")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionLockedMode", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.OverrideMode"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Configuration.OverrideMode")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionRecursive", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionXmlReader", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm13.TypeRef("System.Configuration.SectionInput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasStreamChanged", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlAddChild", 
      new JSIL.MethodSignature(null, [$.String, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlClearResultRecursive", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlGetChild", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlNeedsChildFor", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlRemoveChild", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Impersonate", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $.Type, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitConfigBuildersSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitConfigFromFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProtectedConfigurationSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitSection", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReservedAttributeName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootDeclaration", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadConfigSource", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [$.String, $asm13.TypeRef("System.Configuration.SectionXmlInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MonitorStream", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnStreamChanged", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessRawXml", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigXmlReader"), [$asm13.TypeRef("System.Configuration.ConfigXmlReader"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshFactoryRecord", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveLocationSections", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveOverrideModeFromParent", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.OverrideMode"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Configuration.OverrideMode")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFactories", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Collections.Hashtable"), [$asm13.TypeRef("System.Configuration.XmlUtil")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFactoriesRecursive", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.XmlUtil"), $.String, 
          $asm0E.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanLocationSection", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.XmlUtil"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSections", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.XmlUtil"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSectionsRecursive", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.XmlUtil"), $.String, 
          $.Boolean, $.String, 
          $asm13.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldPrefetchRawXml", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSkipDueToInheritInChildApplications", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSkipDueToInheritInChildApplications", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ThrowIfInitErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfParseErrors", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm13.TypeRef("System.Configuration.SectionRecord")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateConfigBuilderAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateProtectionProviderAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateUniqueChildConfigSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateUniqueConfigSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.FactoryRecord"), $.String, 
          $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySectionName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.XmlUtil"), 
          $asm13.TypeRef("System.Configuration.ExceptionAction"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySectionName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConfigPathSeparatorParams", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "s_unrestrictedConfigPermission", $asm13.TypeRef("System.Configuration.ConfigurationPermission"));

    $.Field({Static:false, Public:false}, "_flags", $asm13.TypeRef("System.Configuration.SafeBitVector32"));

    $.Field({Static:false, Public:false}, "_parent", $.Type);

    $.Field({Static:false, Public:false}, "_children", $asm0E.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_configRoot", $asm13.TypeRef("System.Configuration.Internal.InternalConfigRoot"));

    $.Field({Static:false, Public:false}, "_configName", $.String);

    $.Field({Static:false, Public:false}, "_configPath", $.String);

    $.Field({Static:false, Public:false}, "_locationSubPath", $.String);

    $.Field({Static:false, Public:false}, "_configStreamInfo", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo"));

    $.Field({Static:false, Public:false}, "_configContext", $.Object);

    $.Field({Static:false, Public:false}, "_configBuilders", $asm13.TypeRef("System.Configuration.ConfigurationBuildersSection"));

    $.Field({Static:false, Public:false}, "_protectedConfig", $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection"));

    $.Field({Static:false, Public:false}, "_restrictedPermissions", $asm0E.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:false, Public:false}, "_initErrors", $asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors"));

    $.Field({Static:false, Public:false}, "_initDelayedRoot", $.Type);

    $.Field({Static:false, Public:false}, "_factoryRecords", $asm0E.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_sectionRecords", $asm0E.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_locationSections", $asm0E.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "s_appConfigPath", $.String);

    $.Field({Static:true , Public:false}, "s_indirectInputsComparer", $asm0E.TypeRef("System.Collections.Generic.IComparer`1", [$asm13.TypeRef("System.Configuration.SectionInput")]));

    $.Field({Static:true , Public:false}, "s_invalidSubPathCharactersArray", $jsilcore.TypeRef("System.Array", [$.Char]), JSIL.StringToCharArray("\\?:*\"<>|"));

    $.Field({Static:false, Public:false}, "ConfigurationBuildersSectionType", $asm0E.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConfigPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "StreamName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasInitErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInitDelayed", $.Boolean);

    $.Property({Static:false, Public:false}, "Host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false}, "ConfigBuilderHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"));

    $.Property({Static:false, Public:false}, "Parent", $.Type);

    $.Property({Static:false, Public:false}, "IsRootConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMachineConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "LocationSubPath", $.String);

    $.Property({Static:false, Public:false}, "IsLocationConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigStreamInfo", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo"));

    $.Property({Static:true , Public:false}, "UnrestrictedConfigPermission", $asm13.TypeRef("System.Configuration.ConfigurationPermission"));

    $.Property({Static:false, Public:false}, "ProtectedConfig", $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection"));

    $.Property({Static:false, Public:false}, "ConfigBuilders", $asm13.TypeRef("System.Configuration.ConfigurationBuildersSection"));

    $.Property({Static:false, Public:false}, "HasFactoryRecords", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigContext", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo */ 

(function ConfigRecordStreamInfo$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearStreamInfos", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallbackDelegate", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasStreamInfos", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamInfos", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Collections.Specialized.HybridDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamVersion", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CallbackDelegate", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasStream", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamEncoding", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamVersion", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_hasStream", $.Boolean);

    $.Field({Static:false, Public:false}, "_streamname", $.String);

    $.Field({Static:false, Public:false}, "_streamVersion", $.Object);

    $.Field({Static:false, Public:false}, "_encoding", $asm0E.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "_callbackDelegate", $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback"));

    $.Field({Static:false, Public:false}, "_streamInfos", $asm11.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Property({Static:false, Public:false}, "HasStream", $.Boolean);

    $.Property({Static:false, Public:false}, "StreamName", $.String);

    $.Property({Static:false, Public:false}, "StreamVersion", $.Object);

    $.Property({Static:false, Public:false}, "StreamEncoding", $asm0E.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "CallbackDelegate", $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback"));

    $.Property({Static:false, Public:false}, "StreamInfos", $asm11.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Property({Static:false, Public:false}, "HasStreamInfos", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.BaseConfigurationRecord+IndirectLocationInputComparer */ 

(function IndirectLocationInputComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.BaseConfigurationRecord+IndirectLocationInputComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm13.TypeRef("System.Configuration.SectionInput"), $asm13.TypeRef("System.Configuration.SectionInput")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.Generic.IComparer`1", [$asm13.TypeRef("System.Configuration.SectionInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ClientConfigPaths */ 

(function ClientConfigPaths$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ClientConfigPaths", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineIfValid", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationConfigUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlEvidencePermission", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Security.Permissions.SecurityPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEntryAssembly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRoamingConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RoamingConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationFormatterPermission", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Security.Permissions.SecurityPermission"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEvidenceInfo", 
      new JSIL.MethodSignature($.Object, [
          $asm0E.TypeRef("System.AppDomain"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHash", 
      new JSIL.MethodSignature($.String, [$asm0E.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPaths", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeAndHashSuffix", 
      new JSIL.MethodSignature($.String, [$asm0E.TypeRef("System.AppDomain"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsClickOnceDeployed", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.AppDomain")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeVersionIndependent", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Security.Policy.StrongName"), [$asm0E.TypeRef("System.Security.Policy.StrongName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RefreshCurrent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamesAndVersion", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Reflection.Assembly"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBase32StringSuitableForDirName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.Field({Static:true , Public:false}, "s_Base32Char", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "s_current", $asm13.TypeRef("System.Configuration.ClientConfigPaths"));

    $.Field({Static:true , Public:false}, "s_currentIncludesUserConfig", $asm0E.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_serializationPerm", $asm0E.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Field({Static:true , Public:false}, "s_controlEvidencePerm", $asm0E.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Field({Static:false, Public:false}, "_hasEntryAssembly", $.Boolean);

    $.Field({Static:false, Public:false}, "_includesUserConfig", $.Boolean);

    $.Field({Static:false, Public:false}, "_applicationUri", $.String);

    $.Field({Static:false, Public:false}, "_applicationConfigUri", $.String);

    $.Field({Static:false, Public:false}, "_roamingConfigDirectory", $.String);

    $.Field({Static:false, Public:false}, "_roamingConfigFilename", $.String);

    $.Field({Static:false, Public:false}, "_localConfigDirectory", $.String);

    $.Field({Static:false, Public:false}, "_localConfigFilename", $.String);

    $.Field({Static:false, Public:false}, "_companyName", $.String);

    $.Field({Static:false, Public:false}, "_productName", $.String);

    $.Field({Static:false, Public:false}, "_productVersion", $.String);

    $.Property({Static:false, Public:false}, "HasEntryAssembly", $.Boolean);

    $.Property({Static:false, Public:false}, "ApplicationUri", $.String);

    $.Property({Static:false, Public:false}, "ApplicationConfigUri", $.String);

    $.Property({Static:false, Public:false}, "RoamingConfigFilename", $.String);

    $.Property({Static:false, Public:false}, "HasRoamingConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalConfigFilename", $.String);

    $.Property({Static:false, Public:false}, "HasLocalConfig", $.Boolean);

    $.Property({Static:true , Public:false}, "ControlEvidencePermission", $asm0E.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Property({Static:true , Public:false}, "SerializationFormatterPermission", $asm0E.TypeRef("System.Security.Permissions.SecurityPermission"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration.Internal");
/* class System.Configuration.Internal.DelegatingConfigHost */ 

(function DelegatingConfigHost$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.Internal.DelegatingConfigHost", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConfigurationContext", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDeprecatedConfigContext", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilderHost", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsChangeNotifications", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsRefresh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigPathFromLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigType", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRestrictedPermissions", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Impersonate", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "hostInitParams", function (_) {
          _.Attribute($asm0E.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAboveApplication", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsFullTrustSectionWithoutAptcaAllowed", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocationApplicable", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsTrustedConfigPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchAll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchSection", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessConfigurationSection", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationSection"), [$asm13.TypeRef("System.Configuration.ConfigurationSection"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRawXml", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlNode"), [$asm23.TypeRef("System.Xml.XmlNode"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RequireCompleteInit", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartMonitoringStreamForChanges", 
      new JSIL.MethodSignature($.Object, [$.String, $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StopMonitoringStreamForChanges", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "_host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Field({Static:false, Public:false}, "_configBuilderHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"));

    $.Property({Static:false, Public:false}, "Host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false}, "ConfigBuilderHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsChangeNotifications", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsRefresh", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsPath", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsLocation", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), 
      /* 1 */ $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ClientConfigurationHost */ 

(function ClientConfigurationHost$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.Internal.DelegatingConfigHost"), 
      Name: "System.Configuration.ClientConfigurationHost", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConfigurationContext", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDeprecatedConfigContext", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigPaths", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ClientConfigPaths"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRoamingConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAppConfigHttp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MachineConfigFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsRefresh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRestrictedPermissions", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUserLevel", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationUserLevel"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Impersonate", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "hostInitParams", function (_) {
          _.Attribute($asm0E.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsTrustedConfigPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUserConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchAll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchSection", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshConfigPaths", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RequireCompleteInit", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.Field({Static:true , Public:false}, "s_init", $.Object);

    $.Field({Static:true , Public:false}, "s_version", $.Object);

    $.Field({Static:true , Public:false}, "s_machineConfigFilePath", $asm0E.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "_exePath", $.String);

    $.Field({Static:false, Public:false}, "_configPaths", $asm13.TypeRef("System.Configuration.ClientConfigPaths"));

    $.Field({Static:false, Public:false}, "_fileMap", $asm13.TypeRef("System.Configuration.ExeConfigurationFileMap"));

    $.Field({Static:false, Public:false}, "_initComplete", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigPaths", $asm13.TypeRef("System.Configuration.ClientConfigPaths"));

    $.Property({Static:true , Public:false}, "MachineConfigFilePath", $.String);

    $.Property({Static:false, Public:false}, "HasRoamingConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocalConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAppConfigHttp", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsRefresh", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsPath", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsLocation", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ClientConfigurationSystem */ 

(function ClientConfigurationSystem$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ClientConfigurationSystem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesSectionOnlyUseMachineConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureInit", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSectionUsedInInit", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigRemoved", 
      new JSIL.MethodSignature(null, [$.Object, $asm13.TypeRef("System.Configuration.Internal.InternalConfigEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareClientConfigSystem", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSystem.GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IInternalConfigSystem"), "GetSection");

    $.Field({Static:false, Public:false}, "_configSystem", $asm13.TypeRef("System.Configuration.Internal.IConfigSystem"));

    $.Field({Static:false, Public:false}, "_configRoot", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"));

    $.Field({Static:false, Public:false}, "_configHost", $asm13.TypeRef("System.Configuration.ClientConfigurationHost"));

    $.Field({Static:false, Public:false}, "_machineConfigRecord", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"));

    $.Field({Static:false, Public:false}, "_completeConfigRecord", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"));

    $.Field({Static:false, Public:false}, "_initError", $asm0E.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_isInitInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "_isMachineConfigInited", $.Boolean);

    $.Field({Static:false, Public:false}, "_isUserConfigInited", $.Boolean);

    $.Field({Static:false, Public:false}, "_isAppConfigHttp", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IInternalConfigSystem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationAllowDefinition */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationAllowDefinition", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    MachineOnly: 0, 
    MachineToWebRoot: 100, 
    MachineToApplication: 200, 
    Everywhere: 300, 
  }
);

/* enum System.Configuration.ConfigurationAllowExeDefinition */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationAllowExeDefinition", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    MachineOnly: 0, 
    MachineToApplication: 100, 
    MachineToRoamingUser: 200, 
    MachineToLocalUser: 300, 
  }
);

JSIL.DeclareNamespace("System.Configuration.Provider");
/* class System.Configuration.Provider.ProviderBase */ 

(function ProviderBase$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.Provider.ProviderBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_Description", $.String);

    $.Field({Static:false, Public:false}, "_Initialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationBuilder */ 

(function ConfigurationBuilder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.Provider.ProviderBase"), 
      Name: "System.Configuration.ConfigurationBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationBuilderChain */ 

(function ConfigurationBuilderChain$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationBuilder"), 
      Name: "System.Configuration.ConfigurationBuilderChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Builders", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.ConfigurationBuilder")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.Field({Static:false, Public:false}, "_builders", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.ConfigurationBuilder")]));

    $.Property({Static:false, Public:true }, "Builders", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.ConfigurationBuilder")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationElement */ 

(function ConfigurationElement$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyInstanceAttributes", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyValidator", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyValidatorsRecursive", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AssociateContext", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CachePerTypeValidator", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Type"), $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckLockedElement", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateConfigurationPropertyFromAttributes", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationProperty"), [$asm0E.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateElement", 
      new JSIL.MethodSignature($.Type, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePropertyBagFromType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializePropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationProperty"), $asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureRequiredProperties", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementInformation", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ElementInformation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementProperty", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElementProperty"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementTagName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EvaluationContext", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ContextInformation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockItem", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationValues"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrors", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationErrorsException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorsList", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleLockedAttributes", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IntersectLockCollections", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Collections.Specialized.StringCollection"), [$asm13.TypeRef("System.Configuration.ConfigurationLockCollection"), $asm13.TypeRef("System.Configuration.ConfigurationLockCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLockAttributeName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ListErrors", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeLocks", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRequiredPropertyNotFound", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLockedAttributes", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationLockCollection"), [$asm13.TypeRef("System.Configuration.ConfigurationValue"), $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertiesFromType", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyFileName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyInfoInternal", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.PropertySourceInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyLineNumber", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportInvalidLock", 
      new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $asm13.TypeRef("System.Configuration.ConfigurationValue"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetLockLists", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationProperty"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLocked", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPropertyValue", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ConfigurationProperty"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "s_lockAttributeNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "s_propertyBags", $asm0E.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "s_perTypeValidators", $asm0E.TypeRef("System.Collections.Generic.Dictionary`2"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_nullPropertyValue", $.Object);

    $.Field({Static:true , Public:false}, "s_ElementProperty", $asm13.TypeRef("System.Configuration.ConfigurationElementProperty"));

    $.Field({Static:false, Public:false}, "_bModified", $.Boolean);

    $.Field({Static:false, Public:false}, "_bReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_bElementPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "_bInited", $.Boolean);

    $.Field({Static:false, Public:false}, "_lockedAttributesList", $asm13.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Field({Static:false, Public:false}, "_lockedAllExceptAttributesList", $asm13.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Field({Static:false, Public:false}, "_lockedElementsList", $asm13.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Field({Static:false, Public:false}, "_lockedAllExceptElementsList", $asm13.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_values", $asm13.TypeRef("System.Configuration.ConfigurationValues"));

    $.Field({Static:false, Public:false}, "_elementTagName", $.String);

    $.Field({Static:false, Public:false}, "_evaluationElement", $asm13.TypeRef("System.Configuration.ElementInformation"));

    $.Field({Static:false, Public:false}, "_elementProperty", $asm13.TypeRef("System.Configuration.ConfigurationElementProperty"));

    $.Field({Static:false, Public:false}, "_fItemLocked", $asm13.TypeRef("System.Configuration.ConfigurationValueFlags"));

    $.Field({Static:false, Public:false}, "_evalContext", $asm13.TypeRef("System.Configuration.ContextInformation"));

    $.Field({Static:false, Public:false}, "_configRecord", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Property({Static:false, Public:false}, "ElementPresent", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementTagName", $.String);

    $.Property({Static:false, Public:true }, "LockItem", $.Boolean);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "Values", $asm13.TypeRef("System.Configuration.ConfigurationValues"));

    $.Property({Static:false, Public:true }, "ElementInformation", $asm13.TypeRef("System.Configuration.ElementInformation"));

    $.Property({Static:false, Public:false}, "EvaluationContext", $asm13.TypeRef("System.Configuration.ContextInformation"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementProperty", $asm13.TypeRef("System.Configuration.ConfigurationElementProperty"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationSection */ 

(function ConfigurationSection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.ConfigurationSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeSection", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionInformation", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SectionInformation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_section", $asm13.TypeRef("System.Configuration.SectionInformation"));

    $.Property({Static:false, Public:true }, "SectionInformation", $asm13.TypeRef("System.Configuration.SectionInformation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationBuildersSection */ 

(function ConfigurationBuildersSection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Configuration.ConfigurationBuildersSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "CreateAndInitializeBuilderWithAssert", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationBuilder"), [$asm0E.TypeRef("System.Type"), $asm13.TypeRef("System.Configuration.ProviderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Builders", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationBuilderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Builders", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuilderFromName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationBuilder"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateBuilder", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationBuilder"), [$asm13.TypeRef("System.Configuration.ProviderSettings")])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propBuilders", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "_Builders", $asm13.TypeRef("System.Configuration.ConfigurationBuilderSettings"));

    $.Property({Static:false, Public:true }, "Builders", $asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["builders"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationBuilderSettings */ 

(function ConfigurationBuilderSettings$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.ConfigurationBuilderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Builders", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:false, Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_propBuilders", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Builders", $asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationCollectionAttribute */ 

(function ConfigurationCollectionAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Attribute"), 
      Name: "System.Configuration.ConfigurationCollectionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddItemName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClearItemsName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoveItemName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_addItemName", $.String);

    $.Field({Static:false, Public:false}, "_removeItemName", $.String);

    $.Field({Static:false, Public:false}, "_clearItemsName", $.String);

    $.Field({Static:false, Public:false}, "_itemType", $asm0E.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_collectionType", $asm13.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:true }, "AddItemName", $.String);

    $.Property({Static:false, Public:true }, "RemoveItemName", $.String);

    $.Property({Static:false, Public:true }, "ClearItemsName", $.String);

    $.Property({Static:false, Public:true }, "CollectionType", $asm13.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0E.System.AttributeTargets.$Flags("Class", "Property")]; });

})();

/* class System.Configuration.ConfigurationConverterBase */ 

(function ConfigurationConverterBase$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Configuration.ConfigurationConverterBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0E.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationElementCollection */ 

(function ConfigurationElementCollection$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.ConfigurationElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AssociateContext", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ConfigurationElement"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      new JSIL.MethodSignature(null, [$.Int32, $asm13.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAddInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateNewElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateNewElement", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareKeys", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClearElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockableElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoveElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementKeyInternal", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementsEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorImpl", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsElementName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsElementRemovable", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLockableElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AddElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ClearElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RemoveElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0E.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.Field({Static:false, Public:false}, "_removedItemCount", $.Int32);

    $.Field({Static:false, Public:false}, "_inheritedCount", $.Int32);

    $.Field({Static:false, Public:false}, "_items", $asm0E.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_addElement", $.String);

    $.Field({Static:false, Public:false}, "_removeElement", $.String);

    $.Field({Static:false, Public:false}, "_clearElement", $.String);

    $.Field({Static:false, Public:false}, "bEmitClearTag", $.Boolean);

    $.Field({Static:false, Public:false}, "bCollectionCleared", $.Boolean);

    $.Field({Static:false, Public:false}, "bModified", $.Boolean);

    $.Field({Static:false, Public:false}, "bReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_comparer", $asm0E.TypeRef("System.Collections.IComparer"));

    $.Field({Static:false, Public:false}, "internalAddToEnd", $.Boolean);

    $.Field({Static:false, Public:false}, "internalElementTagName", $.String);

    $.Property({Static:false, Public:false}, "Items", $asm0E.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "AddElementName", $.String);

    $.Property({Static:false, Public:false}, "RemoveElementName", $.String);

    $.Property({Static:false, Public:false}, "ClearElementName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.Property({Static:false, Public:false}, "LockableElements", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm13.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0E.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationElementCollection+EntryType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationElementCollection+EntryType", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Inherited: 0, 
    Replaced: 1, 
    Removed: 2, 
    Added: 3, 
  }
);

/* class System.Configuration.ConfigurationElementCollection+Entry */ 

(function Entry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationElementCollection+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ConfigurationElementCollection+EntryType"), $.Object, 
          $asm13.TypeRef("System.Configuration.ConfigurationElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationElementCollection")])
    );

    $.Field({Static:false, Public:false}, "_entryType", $asm13.TypeRef("System.Configuration.ConfigurationElementCollection+EntryType"));

    $.Field({Static:false, Public:false}, "_key", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm13.TypeRef("System.Configuration.ConfigurationElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationElementCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationElementCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Collections.ArrayList"), $asm13.TypeRef("System.Configuration.ConfigurationElementCollection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Entry", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm0E.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Entry");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Key", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Key");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IDictionaryEnumerator"), "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_itemsEnumerator", $asm0E.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "_current", $asm0E.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "ThisCollection", $asm13.TypeRef("System.Configuration.ConfigurationElementCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Entry", $asm0E.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Key", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm0E.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationElementCollectionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationElementCollectionType", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BasicMap: 0, 
    AddRemoveClearMap: 1, 
    BasicMapAlternate: 2, 
    AddRemoveClearMapAlternate: 3, 
  }
);

/* class System.Configuration.ConfigurationElementProperty */ 

(function ConfigurationElementProperty$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationElementProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.Field({Static:false, Public:false}, "_validator", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "Validator", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationErrorsException */ 

(function ConfigurationErrorsException$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Configuration.ConfigurationException"), 
      Name: "System.Configuration.ConfigurationErrorsException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Exception"), 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0E.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AlwaysSafeFilename", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtractFileNameWithAssert", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BareMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorsGeneric", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Line", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBareMessage", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConfigErrorInfoLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFirstException", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Configuration.ConfigurationException"), [$asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInnerException", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Exception"), [$asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeConfigErrorInfoFilename", 
      new JSIL.MethodSignature($.String, [$asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm23.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeFilename", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "_firstFilename", $.String);

    $.Field({Static:false, Public:false}, "_firstLine", $.Int32);

    $.Field({Static:false, Public:false}, "_errors", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:true , Virtual:true }, "BareMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Line", $.Int32);

    $.Property({Static:false, Public:true }, "Errors", $asm0E.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "ErrorsGeneric", $asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationFileMap */ 

(function ConfigurationFileMap$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationFileMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFilenameFromMachineConfigFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MachineConfigFilename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_getFilenameThunk", $asm0E.TypeRef("System.Func`1", [$.String]));

    $.Property({Static:false, Public:true }, "MachineConfigFilename", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationFileMap+<>c__DisplayClass8_0 */ 

(function $l$gc__DisplayClass8_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationFileMap+<>c__DisplayClass8_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lset_MachineConfigFilename$gb__0", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:true }, "value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Configuration.ConfigurationLockCollection */ 

(function ConfigurationLockCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationLockCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationElement"), $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ConfigurationElement"), $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ConfigurationElement"), $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $.String, $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.ConfigurationValueFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearInternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSeedList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefinedInParent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExceptionList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasParentElements", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetModified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0E.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.Field({Static:false, Public:false}, "internalDictionary", $asm11.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "internalArraylist", $asm0E.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_bModified", $.Boolean);

    $.Field({Static:false, Public:false}, "_bExceptionList", $.Boolean);

    $.Field({Static:false, Public:false}, "_ignoreName", $.String);

    $.Field({Static:false, Public:false}, "_thisElement", $asm13.TypeRef("System.Configuration.ConfigurationElement"));

    $.Field({Static:false, Public:false}, "_lockType", $asm13.TypeRef("System.Configuration.ConfigurationLockCollectionType"));

    $.Field({Static:false, Public:false}, "SeedList", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "ExceptionList", $.Boolean);

    $.Property({Static:false, Public:true }, "HasParentElements", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IEnumerable"), 
      /* 1 */ $asm0E.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationLockCollectionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationLockCollectionType", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LockedAttributes: 1, 
    LockedExceptionList: 2, 
    LockedElements: 3, 
    LockedElementsExceptionList: 4, 
  }
);

/* class System.Configuration.ConfigurationManager */ 

(function ConfigurationManager$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Configuration.ConfigurationManager", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CompleteConfigInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureConfigurationSystem", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareConfigSystem", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInitError", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Exception"))
    );

    $.Field({Static:true , Public:false}, "s_configSystem", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigSystem"));

    $.Field({Static:true , Public:false}, "s_initState", $asm13.TypeRef("System.Configuration.ConfigurationManager+InitState"), function ($pi) {
        return $asm13.System.Configuration.ConfigurationManager_InitState.NotStarted;
      });

    $.Field({Static:true , Public:false}, "s_initLock", $.Object);

    $.Field({Static:true , Public:false}, "s_initError", $asm0E.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationManager+InitState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationManager+InitState", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotStarted: 0, 
    Started: 1, 
    Usable: 2, 
    Completed: 3, 
  }
);

/* class System.Configuration.ConfigurationManagerHelperFactory */ 

(function ConfigurationManagerHelperFactory$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.ConfigurationManagerHelperFactory", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateConfigurationManagerHelper", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"))
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm13.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"));

    $.Property({Static:true , Public:false}, "Instance", $asm13.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationPermission */ 

(function ConfigurationPermission$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Configuration.ConfigurationPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Security.IPermission"), [$asm0E.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Security.IPermission"), [$asm0E.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "_permissionState", $asm0E.TypeRef("System.Security.Permissions.PermissionState"));

    $.ImplementInterfaces(
      /* 3 */ $asm0E.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationProperty */ 

(function ConfigurationProperty$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Type"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Type"), 
          $.Object, $asm11.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Type"), 
          $.Object, $asm11.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructorInit", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0E.TypeRef("System.Type"), 
          $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"), $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
          $asm11.TypeRef("System.ComponentModel.TypeConverter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConverter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClearElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Converter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigurationElementType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProvidedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoveElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDefaultValueFromTypeInfo", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), $asm11.TypeRef("System.ComponentModel.DefaultValueAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePropertyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NonEmptyStringValidator", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultValidatorInstance", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultCollectionPropertyName", $.String, "");

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_providedName", $.String);

    $.Field({Static:false, Public:false}, "_description", $.String);

    $.Field({Static:false, Public:false}, "_type", $asm0E.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_defaultValue", $.Object);

    $.Field({Static:false, Public:false}, "_converter", $asm11.TypeRef("System.ComponentModel.TypeConverter"));

    $.Field({Static:false, Public:false}, "_options", $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"));

    $.Field({Static:false, Public:false}, "_validator", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Field({Static:false, Public:false}, "_addElementName", $.String);

    $.Field({Static:false, Public:false}, "_removeElementName", $.String);

    $.Field({Static:false, Public:false}, "_clearElementName", $.String);

    $.Field({Static:false, Public:false}, "_isTypeInited", $asm0E.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_isConfigurationElementType", $asm0E.TypeRef("System.Boolean"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "ProvidedName", $.String);

    $.Property({Static:false, Public:false}, "IsConfigurationElementType", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm0E.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKey", $.Boolean);

    $.Property({Static:false, Public:true }, "Converter", $asm11.TypeRef("System.ComponentModel.TypeConverter"));

    $.Property({Static:false, Public:true }, "Validator", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:false}, "AddElementName", $.String);

    $.Property({Static:false, Public:false}, "RemoveElementName", $.String);

    $.Property({Static:false, Public:false}, "ClearElementName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationPropertyAttribute */ 

(function ConfigurationPropertyAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Attribute"), 
      Name: "System.Configuration.ConfigurationPropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultCollectionPropertyName", $.String, "");

    $.Field({Static:false, Public:false}, "_Name", $.String);

    $.Field({Static:false, Public:false}, "_DefaultValue", $.Object);

    $.Field({Static:false, Public:false}, "_Flags", $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "Options", $asm13.TypeRef("System.Configuration.ConfigurationPropertyOptions"));

    $.Property({Static:false, Public:true }, "IsDefaultCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKey", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0E.System.AttributeTargets.Property]; });

})();

/* class System.Configuration.ConfigurationPropertyCollection */ 

(function ConfigurationPropertyCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationProperty"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultCollectionProperty", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationProperty"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationProperty"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0E.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.Field({Static:false, Public:false}, "_items", $asm0E.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "DefaultCollectionProperty", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Item", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm0E.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationPropertyOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationPropertyOptions", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    IsDefaultCollection: 1, 
    IsRequired: 2, 
    IsKey: 4, 
    IsTypeStringTransformationRequired: 8, 
    IsAssemblyStringTransformationRequired: 16, 
    IsVersionCheckRequired: 32, 
  }
);

/* class System.Configuration.ConfigurationSchemaErrors */ 

(function ConfigurationSchemaErrors$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationSchemaErrors", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Configuration.ConfigurationException"), $asm13.TypeRef("System.Configuration.ExceptionAction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSavedLocalErrors", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GlobalErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAllErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasGlobalErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasErrors", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetLocalErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveAndResetLocalErrors", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSingleGlobalError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_errorsLocal", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Field({Static:false, Public:false}, "_errorsGlobal", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Field({Static:false, Public:false}, "_errorsAll", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasLocalErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "HasGlobalErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "HasAllErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "GlobalErrorCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationUserLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationUserLevel", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    PerUserRoaming: 10, 
    PerUserRoamingAndLocal: 20, 
  }
);

/* class System.Configuration.ConfigurationValidatorAttribute */ 

(function ConfigurationValidatorAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Attribute"), 
      Name: "System.Configuration.ConfigurationValidatorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDeclaringType", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_declaringType", $asm0E.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_validator", $asm0E.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0E.System.AttributeTargets.Property]; });

})();

/* class System.Configuration.ConfigurationValidatorBase */ 

(function ConfigurationValidatorBase$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValidatorBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValue */ 

(function ConfigurationValue$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm13.TypeRef("System.Configuration.ConfigurationValueFlags"), 
          $asm13.TypeRef("System.Configuration.PropertySourceInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "ValueFlags", $asm13.TypeRef("System.Configuration.ConfigurationValueFlags"));

    $.Field({Static:false, Public:false}, "Value", $.Object);

    $.Field({Static:false, Public:false}, "SourceInfo", $asm13.TypeRef("System.Configuration.PropertySourceInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ConfigurationValueFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ConfigurationValueFlags", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    Inherited: 1, 
    Modified: 2, 
    Locked: 4, 
    XMLParentInherited: 8, 
  }
);

/* class System.Configuration.ConfigurationValues */ 

(function ConfigurationValues$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), 
      Name: "System.Configuration.ConfigurationValues", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssociateContext", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConfigValue", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationValue"), [
          $.Object, $asm13.TypeRef("System.Configuration.ConfigurationValueFlags"), 
          $asm13.TypeRef("System.Configuration.PropertySourceInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigurationElements", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyCollectionInstance", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidValues", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigValue", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationValue"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigValue", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationValue"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceInfo", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.PropertySourceInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInherited", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm13.TypeRef("System.Configuration.ConfigurationValueFlags"), $asm13.TypeRef("System.Configuration.PropertySourceInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "_configRecord", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Field({Static:false, Public:false}, "_containsElement", $asm0E.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_containsInvalidValue", $asm0E.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_emptyCollection", $asm0E.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "ConfigurationElements", $asm0E.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false}, "InvalidValues", $asm0E.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:true , Public:false}, "EmptyCollectionInstance", $asm0E.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValues+EmptyCollection */ 

(function EmptyCollection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+EmptyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_emptyEnumerator", $asm0E.TypeRef("System.Collections.IEnumerator"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValues+EmptyCollection+EmptyCollectionEnumerator */ 

(function EmptyCollectionEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+EmptyCollection+EmptyCollectionEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValues+ConfigurationElementsCollection */ 

(function ConfigurationElementsCollection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+ConfigurationElementsCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationValues"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_values", $asm13.TypeRef("System.Configuration.ConfigurationValues"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValues+ConfigurationElementsCollection+<System-Collections-IEnumerable-GetEnumerator>d__2 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+ConfigurationElementsCollection+<System-Collections-IEnumerable-GetEnumerator>d__2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm13.TypeRef("System.Configuration.ConfigurationValues+ConfigurationElementsCollection"));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0E.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0E.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Configuration.ConfigurationValues+InvalidValuesCollection */ 

(function InvalidValuesCollection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+InvalidValuesCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationValues"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_values", $asm13.TypeRef("System.Configuration.ConfigurationValues"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigurationValues+InvalidValuesCollection+<System-Collections-IEnumerable-GetEnumerator>d__2 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ConfigurationValues+InvalidValuesCollection+<System-Collections-IEnumerable-GetEnumerator>d__2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm13.TypeRef("System.Configuration.ConfigurationValues+InvalidValuesCollection"));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0E.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0E.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Configuration.ConfigXmlAttribute */ 

(function ConfigXmlAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlAttribute"), 
      Name: "System.Configuration.ConfigXmlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlCDataSection */ 

(function ConfigXmlCDataSection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlCDataSection"), 
      Name: "System.Configuration.ConfigXmlCDataSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlComment */ 

(function ConfigXmlComment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlComment"), 
      Name: "System.Configuration.ConfigXmlComment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlElement */ 

(function ConfigXmlElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlElement"), 
      Name: "System.Configuration.ConfigXmlElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlReader */ 

(function ConfigXmlReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlTextReader"), 
      Name: "System.Configuration.ConfigXmlReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_rawXml", $.String);

    $.Field({Static:false, Public:false}, "_lineOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Field({Static:false, Public:false}, "_lineNumberIsConstant", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.Property({Static:false, Public:false}, "RawXml", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlSignificantWhitespace */ 

(function ConfigXmlSignificantWhitespace$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlSignificantWhitespace"), 
      Name: "System.Configuration.ConfigXmlSignificantWhitespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlText */ 

(function ConfigXmlText$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlText"), 
      Name: "System.Configuration.ConfigXmlText", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ConfigXmlWhitespace */ 

(function ConfigXmlWhitespace$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlWhitespace"), 
      Name: "System.Configuration.ConfigXmlWhitespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm23.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ContextInformation */ 

(function ContextInformation$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ContextInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineLevel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_hostingContextEvaluated", $.Boolean);

    $.Field({Static:false, Public:false}, "_hostingContext", $.Object);

    $.Field({Static:false, Public:false}, "_configRecord", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Property({Static:false, Public:true }, "IsMachineLevel", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.DefaultSection */ 

(function DefaultSection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Configuration.DefaultSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeSection", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureStaticPropertyBag", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false}, "_rawXml", $.String);

    $.Field({Static:false, Public:false}, "_isModified", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.DefaultValidator */ 

(function DefaultValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Configuration.DefaultValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ElementInformation */ 

(function ElementInformation$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ElementInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.PropertyInformationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_thisElement", $asm13.TypeRef("System.Configuration.ConfigurationElement"));

    $.Field({Static:false, Public:false}, "_internalProperties", $asm13.TypeRef("System.Configuration.PropertyInformationCollection"));

    $.Property({Static:false, Public:true }, "Properties", $asm13.TypeRef("System.Configuration.PropertyInformationCollection"));

    $.Property({Static:false, Public:true }, "Source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.EmptyImpersonationContext */ 

(function EmptyImpersonationContext$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.EmptyImpersonationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStaticInstance", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.IDisposable"))
    );

    $.Field({Static:true , Public:false}, "s_emptyImpersonationContext", $asm0E.TypeRef("System.IDisposable"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ErrorInfoXmlDocument */ 

(function ErrorInfoXmlDocument$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.Xml.XmlDocument"), 
      Name: "System.Configuration.ErrorInfoXmlDocument", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCDataSection", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlCDataSection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateComment", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlComment"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateElement", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlElement"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSectionXmlNode", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlNode"), [$asm13.TypeRef("System.Configuration.ConfigXmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignificantWhitespace", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlSignificantWhitespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTextNode", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlText"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWhitespace", 
      new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlWhitespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromConfigXmlReader", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigXmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), "get_LineNumber");

    $.Field({Static:false, Public:false}, "_reader", $asm23.TypeRef("System.Xml.XmlTextReader"));

    $.Field({Static:false, Public:false}, "_lineOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ErrorsHelper */ 

(function ErrorsHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Configuration.ErrorsHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])]), $asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddErrors", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])]), $asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorCount", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorsException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationErrorsException"), [$asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHasErrors", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOnErrors", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.ExceptionAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.ExceptionAction", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NonSpecific: 0, 
    Local: 1, 
    Global: 2, 
  }
);

/* class System.Configuration.ExceptionUtil */ 

(function ExceptionUtil$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Configuration.ExceptionUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_NoExceptionInformation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterInvalid", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedError", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapAsConfigException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationErrorsException"), [
          $.String, $asm0E.TypeRef("System.Exception"), 
          $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapAsConfigException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationErrorsException"), [
          $.String, $asm0E.TypeRef("System.Exception"), 
          $.String, $.Int32
        ])
    );

    $.Property({Static:true , Public:false}, "NoExceptionInformation", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ExeConfigurationFileMap */ 

(function ExeConfigurationFileMap$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationFileMap"), 
      Name: "System.Configuration.ExeConfigurationFileMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExeConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalUserConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoamingUserConfigFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExeConfigFilename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalUserConfigFilename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RoamingUserConfigFilename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_exeConfigFilename", $.String);

    $.Field({Static:false, Public:false}, "_roamingUserConfigFilename", $.String);

    $.Field({Static:false, Public:false}, "_localUserConfigFilename", $.String);

    $.Property({Static:false, Public:true }, "ExeConfigFilename", $.String);

    $.Property({Static:false, Public:true }, "RoamingUserConfigFilename", $.String);

    $.Property({Static:false, Public:true }, "LocalUserConfigFilename", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ExeContext */ 

(function ExeContext$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.ExeContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationUserLevel"), $.String])
    );

    $.Field({Static:false, Public:false}, "_userContext", $asm13.TypeRef("System.Configuration.ConfigurationUserLevel"));

    $.Field({Static:false, Public:false}, "_exePath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.FactoryRecord */ 

(function FactoryRecord$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.FactoryRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Object, 
          $.String, $asm13.TypeRef("System.Configuration.SimpleBitVector32"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), 
          $asm13.TypeRef("System.Configuration.OverrideModeSetting"), $.String, 
          $.Int32, $asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm13.TypeRef("System.Configuration.OverrideModeSetting"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrors", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneSection", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneSectionGroup", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowDefinition", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowExeDefinition", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Factory", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Group", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFactoryTrustedWithoutAptca", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFromTrustedConfigRecord", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGroup", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUndeclared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeDefault", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.OverrideModeSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequirePermission", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RestartOnExternalChanges", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentSectionFactory", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String, 
          $.Boolean, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentSectionGroupFactory", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentType", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIgnorable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AllowLocation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Factory", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFactoryTrustedWithoutAptca", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFromTrustedConfigRecord", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGroup", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsUndeclared", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequirePermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RestartOnExternalChanges", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_configKey", $.String);

    $.Field({Static:false, Public:false}, "_group", $.String);

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_flags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));

    $.Field({Static:false, Public:false}, "_factoryTypeName", $.String);

    $.Field({Static:false, Public:false}, "_allowDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"));

    $.Field({Static:false, Public:false}, "_allowExeDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"));

    $.Field({Static:false, Public:false}, "_overrideModeDefault", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_factory", $.Object);

    $.Field({Static:false, Public:false}, "_errors", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Group", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Factory", $.Object);

    $.Property({Static:false, Public:false}, "FactoryTypeName", $.String);

    $.Property({Static:false, Public:false}, "AllowDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"));

    $.Property({Static:false, Public:false}, "AllowExeDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"));

    $.Property({Static:false, Public:false}, "OverrideModeDefault", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "AllowLocation", $.Boolean);

    $.Property({Static:false, Public:false}, "RestartOnExternalChanges", $.Boolean);

    $.Property({Static:false, Public:false}, "RequirePermission", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGroup", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFromTrustedConfigRecord", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUndeclared", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFactoryTrustedWithoutAptca", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "Errors", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.FileUtil */ 

(function FileUtil$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Configuration.FileUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.GenericEnumConverter */ 

(function GenericEnumConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationConverterBase"), 
      Name: "System.Configuration.GenericEnumConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0E.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "_enumType", $asm0E.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.InvalidPropValue */ 

(function InvalidPropValue$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.InvalidPropValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Configuration.ConfigurationException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Error", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Field({Static:false, Public:false}, "_error", $asm11.TypeRef("System.Configuration.ConfigurationException"));

    $.Property({Static:false, Public:false}, "Error", $asm11.TypeRef("System.Configuration.ConfigurationException"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.LocationSectionRecord */ 

(function LocationSectionRecord$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.LocationSectionRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.SectionXmlInfo"), $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorsList", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionXmlInfo", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SectionXmlInfo"))
    );

    $.Field({Static:false, Public:false}, "_sectionXmlInfo", $asm13.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Field({Static:false, Public:false}, "_errors", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "SectionXmlInfo", $asm13.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Property({Static:false, Public:false}, "Errors", $asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "ErrorsList", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.MgmtConfigurationRecord */ 

(function MgmtConfigurationRecord$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"), 
      Name: "System.Configuration.MgmtConfigurationRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SimpleBitVector32"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MgmtParent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInfoUpdates", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm13.TypeRef("System.Configuration.SectionRecord")
        ])
    );

    $.Field({Static:false, Public:false}, "_locationTags", $asm0E.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_streamInfoUpdates", $asm11.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MgmtClassFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));


    function MgmtConfigurationRecord__cctor () {
      $thisType.MgmtClassFlags = new $asm13.System.Configuration.SimpleBitVector32();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MgmtConfigurationRecord__cctor
    );

    $.Property({Static:false, Public:false}, "MgmtParent", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.OverrideMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.OverrideMode", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Inherit: 0, 
    Allow: 1, 
    Deny: 2, 
  }
);

/* struct System.Configuration.OverrideModeSetting */ 

(function OverrideModeSetting$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.ValueType"), 
      Name: "System.Configuration.OverrideModeSetting", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "ChangeModeInternal", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.OverrideMode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFromXmlReadValue", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFromXmlReadValue", 
      new JSIL.MethodSignature($.Type, [$asm13.TypeRef("System.Configuration.OverrideMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideMode", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.OverrideMode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseOverrideModeXmlValue", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.OverrideMode"), [$.String, $asm13.TypeRef("System.Configuration.XmlUtil")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMode", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.OverrideMode"))
    );

    $.Field({Static:false, Public:false}, "_mode", $.Byte);

    $.Field({Static:true , Public:false}, "SectionDefault", $.Type);

    $.Field({Static:true , Public:false}, "LocationDefault", $.Type);


    function OverrideModeSetting__cctor () {
      $thisType.SectionDefault = new $thisType();
      $thisType.LocationDefault = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OverrideModeSetting__cctor
    );

    $.Property({Static:false, Public:false}, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:false}, "OverrideMode", $asm13.TypeRef("System.Configuration.OverrideMode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.PropertyInformation */ 

(function PropertyInformation$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.PropertyInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ConfigurationElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prop", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationProperty"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProvidedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueOrigin", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.PropertyValueOrigin"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "ThisElement", $asm13.TypeRef("System.Configuration.ConfigurationElement"));

    $.Field({Static:false, Public:false}, "PropertyName", $.String);

    $.Field({Static:false, Public:false}, "_Prop", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false}, "Prop", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "ProvidedName", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "ValueOrigin", $asm13.TypeRef("System.Configuration.PropertyValueOrigin"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.PropertyInformationCollection */ 

(function PropertyInformationCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), 
      Name: "System.Configuration.PropertyInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.PropertyInformation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.PropertyInformation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "ThisElement", $asm13.TypeRef("System.Configuration.ConfigurationElement"));

    $.Property({Static:false, Public:true }, "Item", $asm13.TypeRef("System.Configuration.PropertyInformation"));

    $.Property({Static:false, Public:false}, "Item", $asm13.TypeRef("System.Configuration.PropertyInformation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.PropertyInformationCollection+<GetEnumerator>d__8 */ 

(function $lGetEnumerator$gd__8$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.PropertyInformationCollection+<GetEnumerator>d__8", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0E.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm13.TypeRef("System.Configuration.PropertyInformationCollection"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lc$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0E.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0E.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Configuration.PropertySourceInfo */ 

(function PropertySourceInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.PropertySourceInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFilename", 
      new JSIL.MethodSignature($.String, [$asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.Xml.XmlReader")])
    );

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "FileName", $.String);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.PropertyValueOrigin */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.PropertyValueOrigin", 
    BaseType: $asm0E.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Inherited: 1, 
    SetHere: 2, 
  }
);

/* class System.Configuration.ProtectedConfigurationProvider */ 

(function ProtectedConfigurationProvider$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.Provider.ProviderBase"), 
      Name: "System.Configuration.ProtectedConfigurationProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ProtectedConfigurationSection */ 

(function ProtectedConfigurationSection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Configuration.ProtectedConfigurationSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "CreateAndInitializeProviderWithAssert", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$asm0E.TypeRef("System.Type"), $asm13.TypeRef("System.Configuration.ProviderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Providers", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProtectedProviderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Providers", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderFromName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateProvider", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$asm13.TypeRef("System.Configuration.ProviderSettings")])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propProviders", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propDefaultProvider", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "_Providers", $asm13.TypeRef("System.Configuration.ProtectedProviderSettings"));

    $.Property({Static:false, Public:true }, "Providers", $asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["providers"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ProtectedProviderSettings */ 

(function ProtectedProviderSettings$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.ProtectedProviderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Providers", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
    );

    $.Field({Static:false, Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_propProviders", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Providers", $asm13.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ProviderSettings */ 

(function ProviderSettings$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Configuration.ProviderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperty", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePropertyCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_propName", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_propType", $asm13.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false}, "_PropertyNameCollection", $asm11.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm13.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Collections.Specialized.NameValueCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ProviderSettingsCollection */ 

(function ProviderSettingsCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Configuration.ProviderSettingsCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ProviderSettings"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm13.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm13.TypeRef("System.Configuration.ProviderSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm13.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm13.System.Configuration.ProviderSettings.__Type__]; });

})();

/* class System.Configuration.RuntimeConfigurationRecord */ 

(function RuntimeConfigurationRecord$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"), 
      Name: "System.Configuration.RuntimeConfigurationRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostDecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [
          $asm13.TypeRef("System.Configuration.Internal.InternalConfigRoot"), $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SimpleBitVector32"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRuntimeObjectWithFullTrust", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationSection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRuntimeObjectWithRestrictedPermissions", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Configuration.ConfigurationSection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm13.TypeRef("System.Configuration.SectionRecord")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "RuntimeClassFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));


    function RuntimeConfigurationRecord__cctor () {
      $thisType.RuntimeClassFlags = new $asm13.System.Configuration.SimpleBitVector32();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RuntimeConfigurationRecord__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.RuntimeConfigurationRecord+RuntimeConfigurationFactory */ 

(function RuntimeConfigurationFactory$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.RuntimeConfigurationRecord+RuntimeConfigurationFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForLockAttributes", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), 
          $asm13.TypeRef("System.Configuration.FactoryRecord"), $asm13.TypeRef("System.Configuration.SectionRecord"), 
          $asm13.TypeRef("System.Configuration.SectionInput"), $.Object, 
          $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionImpl", 
      new JSIL.MethodSignature($.Object, [
          $asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionWithFullTrust", 
      new JSIL.MethodSignature($.Object, [
          $asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionWithRestrictedPermissions", 
      new JSIL.MethodSignature($.Object, [
          $asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord"), $asm13.TypeRef("System.Configuration.SectionInput"), 
          $.Object, $asm13.TypeRef("System.Configuration.ConfigXmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitWithFullTrust", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitWithRestrictedPermissions", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord")])
    );

    $.Field({Static:false, Public:false}, "_sectionCtor", $asm0E.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "_sectionHandler", $asm11.TypeRef("System.Configuration.IConfigurationSectionHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Configuration.SafeBitVector32 */ 

(function SafeBitVector32$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.ValueType"), 
      Name: "System.Configuration.SafeBitVector32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "_data", $asm0E.TypeRef("System.Int32"));

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SectionInformation */ 

(function SectionInformation$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.SectionInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachToConfigurationRecord", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.MgmtConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetModifiedFlags", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRuntimeConfigurationInformation", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"), $asm13.TypeRef("System.Configuration.FactoryRecord"), 
          $asm13.TypeRef("System.Configuration.SectionRecord")
        ])
    );

    $.Field({Static:false, Public:false}, "_configurationSection", $asm13.TypeRef("System.Configuration.ConfigurationSection"));

    $.Field({Static:false, Public:false}, "_flags", $asm13.TypeRef("System.Configuration.SafeBitVector32"));

    $.Field({Static:false, Public:false}, "_modifiedFlags", $asm13.TypeRef("System.Configuration.SimpleBitVector32"));

    $.Field({Static:false, Public:false}, "_allowDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"));

    $.Field({Static:false, Public:false}, "_allowExeDefinition", $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"));

    $.Field({Static:false, Public:false}, "_configRecord", $asm13.TypeRef("System.Configuration.MgmtConfigurationRecord"));

    $.Field({Static:false, Public:false}, "_configKey", $.String);

    $.Field({Static:false, Public:false}, "_group", $.String);

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_typeName", $.String);

    $.Field({Static:false, Public:false}, "_configSource", $.String);

    $.Field({Static:false, Public:false}, "_configSourceStreamName", $.String);

    $.Field({Static:false, Public:false}, "_protectionProvider", $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.Field({Static:false, Public:false}, "_protectionProviderName", $.String);

    $.Field({Static:false, Public:false}, "_configBuilder", $asm13.TypeRef("System.Configuration.ConfigurationBuilder"));

    $.Field({Static:false, Public:false}, "_configBuilderName", $.String);

    $.Field({Static:false, Public:false}, "_overrideModeDefault", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Field({Static:false, Public:false}, "_overrideMode", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:true }, "SectionName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SectionInput */ 

(function SectionInput$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.SectionInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.SectionXmlInfo"), $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilder", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResultRuntimeObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigBuilderDetermined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProtectionProviderDetermined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectionProvider", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResultRuntimeObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionXmlInfo", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SectionXmlInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigBuilder", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ConfigurationBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtectionProvider", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Result", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResultRuntimeObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_unevaluated", $.Object);

    $.Field({Static:false, Public:false}, "_sectionXmlInfo", $asm13.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Field({Static:false, Public:false}, "_configBuilder", $asm13.TypeRef("System.Configuration.ConfigurationBuilder"));

    $.Field({Static:false, Public:false}, "_isConfigBuilderDetermined", $.Boolean);

    $.Field({Static:false, Public:false}, "_protectionProvider", $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.Field({Static:false, Public:false}, "_isProtectionProviderDetermined", $.Boolean);

    $.Field({Static:false, Public:false}, "_result", $.Object);

    $.Field({Static:false, Public:false}, "_resultRuntimeObject", $.Object);

    $.Field({Static:false, Public:false}, "_errors", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "SectionXmlInfo", $asm13.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Property({Static:false, Public:false}, "HasResult", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResultRuntimeObject", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.Property({Static:false, Public:false}, "ResultRuntimeObject", $.Object);

    $.Property({Static:false, Public:false}, "IsConfigBuilderDetermined", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigBuilder", $asm13.TypeRef("System.Configuration.ConfigurationBuilder"));

    $.Property({Static:false, Public:false}, "IsProtectionProviderDetermined", $.Boolean);

    $.Property({Static:false, Public:false}, "ProtectionProvider", $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.Property({Static:false, Public:false}, "Errors", $asm0E.TypeRef("System.Collections.Generic.ICollection`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SectionRecord */ 

(function SectionRecord$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.SectionRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFileInput", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.SectionInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIndirectLocationInput", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.SectionInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLocationInput", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.SectionInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLocationInputImpl", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.SectionInput"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeLockSettings", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.OverrideMode"), $asm13.TypeRef("System.Configuration.OverrideMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearRawXml", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileInput", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.SectionInput"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasFileInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIndirectLocationInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocationInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResultRuntimeObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndirectLocationInputs", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsResultTrustedWithoutAptca", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationInputs", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockChildrenWithoutFileInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Locked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequirePermission", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResultRuntimeObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllErrors", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Configuration.ConfigurationException")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFileInput", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsResultTrustedWithoutAptca", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequirePermission", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Result", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResultRuntimeObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_unevaluated", $.Object);

    $.Field({Static:false, Public:false}, "_flags", $asm13.TypeRef("System.Configuration.SafeBitVector32"));

    $.Field({Static:false, Public:false}, "_configKey", $.String);

    $.Field({Static:false, Public:false}, "_locationInputs", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]));

    $.Field({Static:false, Public:false}, "_fileInput", $asm13.TypeRef("System.Configuration.SectionInput"));

    $.Field({Static:false, Public:false}, "_indirectLocationInputs", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]));

    $.Field({Static:false, Public:false}, "_result", $.Object);

    $.Field({Static:false, Public:false}, "_resultRuntimeObject", $.Object);

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Locked", $.Boolean);

    $.Property({Static:false, Public:false}, "LockChildren", $.Boolean);

    $.Property({Static:false, Public:false}, "LockChildrenWithoutFileInput", $.Boolean);

    $.Property({Static:false, Public:false}, "IsResultTrustedWithoutAptca", $.Boolean);

    $.Property({Static:false, Public:false}, "RequirePermission", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocationInputs", $.Boolean);

    $.Property({Static:false, Public:false}, "LocationInputs", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]));

    $.Property({Static:false, Public:false}, "HasFileInput", $.Boolean);

    $.Property({Static:false, Public:false}, "FileInput", $asm13.TypeRef("System.Configuration.SectionInput"));

    $.Property({Static:false, Public:false}, "HasIndirectLocationInputs", $.Boolean);

    $.Property({Static:false, Public:false}, "IndirectLocationInputs", $asm0E.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Configuration.SectionInput")]));

    $.Property({Static:false, Public:false}, "HasInput", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResult", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResultRuntimeObject", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.Property({Static:false, Public:false}, "ResultRuntimeObject", $.Object);

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SectionXmlInfo */ 

(function SectionXmlInfo$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.SectionXmlInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 15, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.Int32, 
          $.Object, $.String, 
          $.String, $.String, 
          $.Object, $.String, 
          $.String, $asm13.TypeRef("System.Configuration.OverrideModeSetting"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSourceStreamName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefinitionConfigPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeSetting", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.OverrideModeSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectionProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SkipInChildApps", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamVersion", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TargetConfigPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigBuilderName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtectionProviderName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RawXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TargetConfigPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_configKey", $.String);

    $.Field({Static:false, Public:false}, "_definitionConfigPath", $.String);

    $.Field({Static:false, Public:false}, "_targetConfigPath", $.String);

    $.Field({Static:false, Public:false}, "_subPath", $.String);

    $.Field({Static:false, Public:false}, "_filename", $.String);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_streamVersion", $.Object);

    $.Field({Static:false, Public:false}, "_configSource", $.String);

    $.Field({Static:false, Public:false}, "_configSourceStreamName", $.String);

    $.Field({Static:false, Public:false}, "_configSourceStreamVersion", $.Object);

    $.Field({Static:false, Public:false}, "_skipInChildApps", $.Boolean);

    $.Field({Static:false, Public:false}, "_rawXml", $.String);

    $.Field({Static:false, Public:false}, "_configBuilderName", $.String);

    $.Field({Static:false, Public:false}, "_protectionProviderName", $.String);

    $.Field({Static:false, Public:false}, "_overrideMode", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "StreamVersion", $.Object);

    $.Property({Static:false, Public:false}, "ConfigSource", $.String);

    $.Property({Static:false, Public:false}, "ConfigSourceStreamName", $.String);

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "DefinitionConfigPath", $.String);

    $.Property({Static:false, Public:false}, "TargetConfigPath", $.String);

    $.Property({Static:false, Public:false}, "SubPath", $.String);

    $.Property({Static:false, Public:false}, "RawXml", $.String);

    $.Property({Static:false, Public:false}, "ConfigBuilderName", $.String);

    $.Property({Static:false, Public:false}, "ProtectionProviderName", $.String);

    $.Property({Static:false, Public:false}, "OverrideModeSetting", $asm13.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "SkipInChildApps", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Configuration.SimpleBitVector32 */ 

(function SimpleBitVector32$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.ValueType"), 
      Name: "System.Configuration.SimpleBitVector32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "data", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.StreamInfo */ 

(function StreamInfo$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.StreamInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMonitored", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsMonitored", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Version", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_sectionName", $.String);

    $.Field({Static:false, Public:false}, "_configSource", $.String);

    $.Field({Static:false, Public:false}, "_streamName", $.String);

    $.Field({Static:false, Public:false}, "_isMonitored", $.Boolean);

    $.Field({Static:false, Public:false}, "_version", $.Object);

    $.Property({Static:false, Public:false}, "SectionName", $.String);

    $.Property({Static:false, Public:false}, "StreamName", $.String);

    $.Property({Static:false, Public:false}, "IsMonitored", $.Boolean);

    $.Property({Static:false, Public:false}, "Version", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.StringUtil */ 

(function StringUtil$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Configuration.StringUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EqualsIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartsWithIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.StringValidator */ 

(function StringValidator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Configuration.StringValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_minLength", $.Int32);

    $.Field({Static:false, Public:false}, "_maxLength", $.Int32);

    $.Field({Static:false, Public:false}, "_invalidChars", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.TypeUtil */ 

(function TypeUtil$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Configuration.TypeUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CallerHasMemberAccessOrAspNetPermission", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDynamicMethod", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $asm0E.TypeRef("System.Type"), $asm0E.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDynamicMethodWithUnrestrictedPermission", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $asm0E.TypeRef("System.Type"), $asm0E.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceRestricted", 
      new JSIL.MethodSignature("!!0", [$asm0E.TypeRef("System.Type"), $.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceRestricted", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Type"), $asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceWithReflectionPermission", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsCallerFullTrust", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstructorWithReflectionPermission", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm0E.TypeRef("System.Type"), $asm0E.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLegacyType", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeImpl", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeWithReflectionPermission", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeWithReflectionPermission", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasAptcaBit", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeCtorWithReflectionPermission", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeAllowedInConfig", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeFromTrustedAssemblyWithoutAptca", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PreventTailCall", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyAssignableType", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [
          $asm0E.TypeRef("System.Type"), $asm0E.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "s_fullTrustPermissionSet", $asm0E.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_memberAccessPermission", $asm0E.TypeRef("System.Security.Permissions.ReflectionPermission"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_aspNetHostingPermission", $asm11.TypeRef("System.Web.AspNetHostingPermission"));

    $.Property({Static:true , Public:false}, "IsCallerFullTrust", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.UrlPath */ 

(function UrlPath$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Configuration.UrlPath", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertFileNameToUrl", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAbsoluteLocalPhysicalPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAbsoluteUNCPhysicalPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirectorySeparatorChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqualOrSubpath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqualOrSubpathImpl", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSubpath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.ValidatorUtils */ 

(function ValidatorUtils$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Configuration.ValidatorUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "HelperParamValidation", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.XmlUtil */ 

(function XmlUtil$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.XmlUtil", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("System.IO.Stream"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("System.IO.Stream"), $.String, 
          $.Boolean, $asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorRequiredAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.ExceptionAction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorReservedAttribute", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorUnrecognizedAttribute", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorUnrecognizedElement", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyElement", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.XmlUtilWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopySection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyXmlNode", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.XmlUtilWriter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.Xml.XmlTextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaErrors", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPositionOffset", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToNextElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCachedStringWriter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipToNextElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictReadToNextElement", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictSkipToNextElement", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictSkipToOurParentsEndElement", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndGetBooleanAttribute", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.ExceptionAction"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndGetNonEmptyStringAttribute", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.ExceptionAction"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIgnorableNodeType", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNoUnrecognizedAttributes", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.ExceptionAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyRequiredAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $asm13.TypeRef("System.Configuration.ExceptionAction")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_positionOffset", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_stream", $asm0E.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_streamName", $.String);

    $.Field({Static:false, Public:false}, "_reader", $asm23.TypeRef("System.Xml.XmlTextReader"));

    $.Field({Static:false, Public:false}, "_cachedStringWriter", $asm0E.TypeRef("System.IO.StringWriter"));

    $.Field({Static:false, Public:false}, "_schemaErrors", $asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors"));

    $.Field({Static:false, Public:false}, "_lastLineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_lastLinePosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "Reader", $asm23.TypeRef("System.Xml.XmlTextReader"));

    $.Property({Static:false, Public:false}, "SchemaErrors", $asm13.TypeRef("System.Configuration.ConfigurationSchemaErrors"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("System.IDisposable"), 
      /* 1 */ $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.XmlUtilWriter */ 

(function XmlUtilWriter$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.XmlUtilWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.IO.TextWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendAttributeValue", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.Xml.XmlTextReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCData", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendComment", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEntityRef", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEscapeTextString", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEscapeXmlString", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendNewLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendProcessingInstruction", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendRequiredWhiteSpace", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpace", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpaces", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendWhiteSpace", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStreamCheckpoint", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TrackPosition", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePosition", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.Field({Static:true , Public:false}, "SPACES_8", $.String);

    $.Field({Static:true , Public:false}, "SPACES_4", $.String);

    $.Field({Static:true , Public:false}, "SPACES_2", $.String);

    $.Field({Static:false, Public:false}, "_writer", $asm0E.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "_baseStream", $asm0E.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "_trackPosition", $.Boolean);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "_isLastLineBlank", $.Boolean);

    $.Field({Static:false, Public:false}, "_lineStartCheckpoint", $.Object);

    $.Property({Static:false, Public:false}, "Writer", $asm0E.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:false}, "TrackPosition", $.Boolean);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.XmlUtilWriter+StreamWriterCheckpoint */ 

(function StreamWriterCheckpoint$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.XmlUtilWriter+StreamWriterCheckpoint", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.XmlUtilWriter"))
    );

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "_isLastLineBlank", $.Boolean);

    $.Field({Static:false, Public:false}, "_streamLength", $.Int64);

    $.Field({Static:false, Public:false}, "_streamPosition", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.SR */ 

(function SR$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0E.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0E.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0E.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Internal.ConfigSystem */ 

(function ConfigSystem$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.Internal.ConfigSystem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.get_Host", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"))
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigSystem"), "get_Host");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.get_Root", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"))
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigSystem"), "get_Root");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Init", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IConfigSystem"), "Init")
      .Parameter(1, "hostInitParams", function (_) {
          _.Attribute($asm0E.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:false}, "_configRoot", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"));

    $.Field({Static:false, Public:false}, "_configHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Root", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"));

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IConfigSystem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Configuration.Internal.IConfigErrorInfo */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigErrorInfo", true, [], function ($) {
    $.Method({}, "get_Filename", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_LineNumber", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "Filename");
    $.Property({}, "LineNumber");
  }, []);

/* interface System.Configuration.Internal.IConfigSystem */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigSystem", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])]));
    $.Method({}, "get_Host", JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost")));
    $.Method({}, "get_Root", JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot")));
    $.Property({}, "Host");
    $.Property({}, "Root");
  }, []);

/* interface System.Configuration.Internal.IConfigurationManagerHelper */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigurationManagerHelper", true, [], function ($) {
    $.Method({}, "EnsureNetConfigLoaded", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IConfigurationManagerInternal */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigurationManagerInternal", true, [], function ($) {
    $.Method({}, "get_SetConfigurationSystemInProgress", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "SetConfigurationSystemInProgress");
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IInternalConfigHost */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigHost", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])]));
    $.Method({}, "IsConfigRecordRequired", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsInitDelayed", new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")]));
    $.Method({}, "RequireCompleteInit", JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")));
    $.Method({}, "GetStreamName", new JSIL.MethodSignature($.String, [$.String]));
    $.Method({}, "GetStreamNameForConfigSource", new JSIL.MethodSignature($.String, [$.String, $.String]));
    $.Method({}, "GetStreamVersion", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "OpenStreamForRead", new JSIL.MethodSignature($asm0E.TypeRef("System.IO.Stream"), [$.String]));
    $.Method({}, "IsFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "get_SupportsChangeNotifications", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "StartMonitoringStreamForChanges", new JSIL.MethodSignature($.Object, [$.String, $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback")]));
    $.Method({}, "StopMonitoringStreamForChanges", new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.Internal.StreamChangeCallback")]));
    $.Method({}, "get_SupportsRefresh", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_SupportsPath", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_SupportsLocation", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "IsAboveApplication", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "GetConfigPathFromLocationSubPath", new JSIL.MethodSignature($.String, [$.String, $.String]));
    $.Method({}, "IsLocationApplicable", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsDefinitionAllowed", new JSIL.MethodSignature($.Boolean, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ]));
    $.Method({}, "VerifyDefinitionAllowed", new JSIL.MethodSignature(null, [
          $.String, $asm13.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm13.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm13.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ]));
    $.Method({}, "IsTrustedConfigPath", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsFullTrustSectionWithoutAptcaAllowed", new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord")]));
    $.Method({}, "GetRestrictedPermissions", new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]));
    $.Method({}, "Impersonate", JSIL.MethodSignature.Return($asm0E.TypeRef("System.IDisposable")));
    $.Method({}, "PrefetchAll", new JSIL.MethodSignature($.Boolean, [$.String, $.String]));
    $.Method({}, "PrefetchSection", new JSIL.MethodSignature($.Boolean, [$.String, $.String]));
    $.Method({}, "CreateDeprecatedConfigContext", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "CreateConfigurationContext", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "DecryptSection", new JSIL.MethodSignature($.String, [
          $.String, $asm13.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm13.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ]));
    $.Method({}, "GetConfigType", new JSIL.MethodSignature($asm0E.TypeRef("System.Type"), [$.String, $.Boolean]));
    $.Property({}, "SupportsChangeNotifications");
    $.Property({}, "SupportsRefresh");
    $.Property({}, "SupportsPath");
    $.Property({}, "SupportsLocation");
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IInternalConfigRecord */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigRecord", true, [], function ($) {
    $.Method({}, "get_ConfigPath", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_StreamName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "ThrowIfInitErrors", JSIL.MethodSignature.Void);
    $.Method({}, "GetSection", new JSIL.MethodSignature($.Object, [$.String]));
    $.Property({}, "ConfigPath");
    $.Property({}, "StreamName");
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IInternalConfigRoot */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigRoot", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.Boolean]));
    $.Method({}, "get_IsDesignTime", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "add_ConfigRemoved", JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")));
    $.Method({}, "GetConfigRecord", new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String]));
    $.Property({}, "IsDesignTime");
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IInternalConfigSystem */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigSystem", true, [], function ($) {
    $.Method({}, "GetSection", new JSIL.MethodSignature($.Object, [$.String]));
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* interface System.Configuration.Internal.IInternalConfigurationBuilderHost */ 

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigurationBuilderHost", true, [], function ($) {
    $.Method({}, "ProcessRawXml", new JSIL.MethodSignature($asm23.TypeRef("System.Xml.XmlNode"), [$asm23.TypeRef("System.Xml.XmlNode"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")]));
    $.Method({}, "ProcessConfigurationSection", new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.ConfigurationSection"), [$asm13.TypeRef("System.Configuration.ConfigurationSection"), $asm13.TypeRef("System.Configuration.ConfigurationBuilder")]));
  }, [])
  .Attribute($asm0E.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

/* class System.Configuration.Internal.InternalConfigEventArgs */ 

(function InternalConfigEventArgs$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.EventArgs"), 
      Name: "System.Configuration.Internal.InternalConfigEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_configPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Configuration.Internal.InternalConfigEventHandler */ 

JSIL.MakeDelegate("System.Configuration.Internal.InternalConfigEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Object"), $asm13.TypeRef("System.Configuration.Internal.InternalConfigEventArgs")]));

/* class System.Configuration.Internal.InternalConfigRoot */ 

(function InternalConfigRoot$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "System.Configuration.Internal.InternalConfigRoot", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireHierarchyLockForRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireHierarchyLockForWrite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ConfigRemoved", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.InternalConfigEventHandler"))
    )
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ClearResult", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FireConfigChanged", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigBuilderHost", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootConfigRecord", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigRecord", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlFindConfigRecord", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Configuration.BaseConfigurationRecord")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigChanged", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.InternalConfigEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigRemoved", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.Internal.InternalConfigEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseHierarchyLockForRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseHierarchyLockForWrite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveConfigImpl", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Configuration.BaseConfigurationRecord")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveConfigRecord", 
      JSIL.MethodSignature.Action($asm13.TypeRef("System.Configuration.BaseConfigurationRecord"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.get_IsDesignTime", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), "get_IsDesignTime");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.Init", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.Boolean])
    )
      .Overrides($asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), "Init");

    $.Field({Static:false, Public:false}, "_host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Field({Static:false, Public:false}, "_configBuilderHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"));

    $.Field({Static:false, Public:false}, "_hierarchyLock", $asm0E.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "_rootConfigRecord", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Field({Static:false, Public:false}, "_isDesignTime", $.Boolean);

    $.Field({Static:false, Public:false}, "ConfigChanged", $asm13.TypeRef("System.Configuration.Internal.InternalConfigEventHandler"))
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ConfigRemoved", $asm13.TypeRef("System.Configuration.Internal.InternalConfigEventHandler"))
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Host", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false}, "ConfigBuilderHost", $asm13.TypeRef("System.Configuration.Internal.IInternalConfigurationBuilderHost"));

    $.Property({Static:false, Public:false}, "RootConfigRecord", $asm13.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.IsDesignTime", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "ConfigRemoved", $asm13.TypeRef("System.Configuration.Internal.InternalConfigEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm13.TypeRef("System.Configuration.Internal.IInternalConfigRoot")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Configuration.Internal.StreamChangeCallback */ 

JSIL.MakeDelegate("System.Configuration.Internal.StreamChangeCallback", true, [], 
  JSIL.MethodSignature.Action($asm0E.TypeRef("System.String")));

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

